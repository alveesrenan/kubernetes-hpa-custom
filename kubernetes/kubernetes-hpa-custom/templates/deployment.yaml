apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kubernetes-hpa-custom.fullname" . }}
  namespace: {{ include "kubernetes-hpa-custom.namespace" . }}
  labels:
    {{ include "kubernetes-hpa-custom.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "kubernetes-hpa-custom.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "kubernetes-hpa-custom.name" . }}
    spec:      
      imagePullSecrets:
        - name: {{ .Values.image.pullsecret }}
      containers:
        - name: {{ .Values.deployment.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: {{ .Values.deployment.containerPort }}
          {{- if .Values.deployment.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessProbe.path }}
              port: {{ .Values.deployment.containerPort }}
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployment.livenessProbe.failureThreshold }}
          {{ end -}}
          {{- if .Values.deployment.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessProbe.path }}
              port: {{ .Values.deployment.containerPort }}
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployment.readinessProbe.failureThreshold }}
          {{ end -}}
          {{- if .Values.deployment.env }}
          env:
            # range within normal environment variables
            {{- range $secret_key, $secret_value := .Values.deployment.env }}
            - name: {{ $secret_key }}
              value: {{ $secret_value | quote }}
            {{ end -}}
            # range within configmaps environment variables 
            {{- if .Values.deployment.envFromConfigMap }}
              {{- range $secret := .Values.deployment.envFromConfigMap }}
                {{- range $env_name, $secret_key := $secret.keys }}
            - name: {{ $env_name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret_key | quote }}
                {{ end -}}
              {{ end -}}
            {{ end -}}
            # range within secrets environment variables 
            {{- if .Values.deployment.envFromSecret }}
              {{- range $secret := .Values.deployment.envFromSecret }}
                {{- range $env_name, $secret_key := $secret.keys }}
            - name: {{ $env_name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret_key | quote }}
                {{ end -}}
              {{ end -}}
            {{ end -}}
          {{ end -}}
          {{- if .Values.deployment.resources }}
          resources:
          {{ toYaml .Values.deployment.resources | nindent 12 }}
          {{ end -}}
